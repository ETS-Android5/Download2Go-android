import groovy.json.JsonSlurper

def versionInfoJava = '/* AUTOGENERATED - DO NOT UPDATE*/\n\
\n\
package com.penthera;\n\
\n\
public final class VersionInfo\n\
{\n\
    public static final String VERSION_DATA = %1s\n\
}'


apply from: "$rootDir/gradle_util/utils.gradle"

boolean isReleaseBuild(){

    boolean ret = false

    if(project.properties.containsKey("publishRelease")){
        ret = "true".equals(project.properties["publishRelease"])
    }

    return ret
}

boolean hasOverrideVersion(){
    boolean ret = false

    if(project.hasProperty("overrideVersion")){
        ret = !project.properties["overrideVersion"].isEmpty()
    }


    return ret
}

boolean hasSdkVersion(){
    boolean ret = false

    if(project.hasProperty("sdkVersion")){
        ret = !project.properties["sdkVersion"].isEmpty()
    }


    return ret
}

task generateVersionInfo {

    doFirst{

        def stdout = new ByteArrayOutputStream()

        exec {
            commandLine 'gitversion'
            standardOutput = stdout
        }
        def gitVersionString = stdout.toString().trim()
        def json = new JsonSlurper().parseText(gitVersionString)

        def fullSemVersion , versionCode,preRelease, verMajor, verMinor, verPatch


        if(hasOverrideVersion()) {
            fullSemVersion = project.properties["overrideVersion"]
            String[] versionInfo = fullSemVersion.split("\\.")
            verMajor = versionInfo[0]
            verMinor = versionInfo[1]
            verPatch = versionInfo[2] + (versionInfo.size() > 3 ? "." + versionInfo[3] : "")
            preRelease = isReleaseBuild() ? "" : "1"



            versionCode = versionInfo[0] + versionInfo[1].padLeft(2, "0")
            if(versionInfo[2].indexOf('-') > -1){//beta build verPatch contains -BETA
                versionCode += versionInfo[2].substring(0, versionInfo[2].indexOf('-')).padLeft(2,"0")
            } else{
                versionCode += versionInfo[2].padLeft(2, "0")
            }
            if (versionInfo.size() > 3) {
                versionCode += versionInfo[3]
            }



            def replaceString = json["Major"].toString() + "\\." + json["Minor"].toString() + "\\." + json["Patch"].toString()

            gitVersionString = gitVersionString.replaceAll(replaceString, fullSemVersion )

            gitVersionString = gitVersionString.replaceAll(":"+json["Major"].toString() + ",", ":"+verMajor+",")
            gitVersionString = gitVersionString.replaceAll(":"+json["Minor"].toString() + ",", ":"+verMinor+",")
            gitVersionString = gitVersionString.replaceAll(":"+json["Patch"].toString() + ",", ":"+verPatch+",")

        }
        else {
            fullSemVersion = json["Major"] + "." + json["Minor"] + "." + json["Patch"]
            versionCode = json["Major"].toString() + json["Minor"].toString() + json["Patch"].toString()
            preRelease = json["PreReleaseNumber"].toString()
            verMajor = json["Major"].toString()
            verMinor = json["Minor"].toString()
        }

        if (!isReleaseBuild()) {

            if (System.env.BUILD_NUMBER == null) {//not a jenkins build
                if (preRelease?.trim()) {//use prerelease number if we have one (release builds will not)
                    fullSemVersion += "(" + preRelease + ")"
                    versionCode += preRelease
                }
            } else {
                fullSemVersion += "(" + System.env.BUILD_NUMBER + ")"
                versionCode += System.env.BUILD_NUMBER
                preRelease = System.env.BUILD_NUMBER
            }
        }

        def javaFile =  new File(projectDir.toString()+"/src/main/java/com/penthera/VersionInfo.java")
        javaFile.write(sprintf(versionInfoJava, "\"" + gitVersionString.trim().replaceAll("\n", "").replaceAll("\r", "").replaceAll("\"", /\\"/) + '\";'))


        def debugValues = [debug_version          :  verMajor + "." + verMinor,
                           debug_full_version     : fullSemVersion,
                           debug_build_version    : "CnC Android SDK " + verMajor + "." + verMinor,
                           debug_prerelease_number: preRelease,
                           debug_build_date       : new Date().format("MM/dd/YYYY"),
                           debug_comment          : "Release Candidate for Virtuoso SDK " + fullSemVersion]

        writeStringResFile(projectDir.toString()+"/src/main/res/values/debug_version_info.xml", debugValues, "debug_version_code", versionCode.toInteger())


        def releaseValues = [release_version          : verMajor + "." + verMinor,
                             release_full_version     : fullSemVersion,
                             release_build_version    : "CnC Android SDK " + verMajor + "." + verMinor,
                             release_prerelease_number: preRelease,
                             release_build_date       : new Date().format("MM/dd/YYYY"),
                             release_comment          : "Release Candidate for Virtuoso SDK " + fullSemVersion]

        writeStringResFile(projectDir.toString()+"/src/main/res/values/release_version_info.xml", releaseValues, "release_version_code", versionCode.toInteger())


        //updateServiceIntentFilter("SDK/src/main/AndroidManifest.xml",fullSemVersion.replaceAll(" ","_"))
    }
}

def writeStringResFile( String filePath, Map<String,String> values, String versionCodeName, int versionCode) {
    def file = new File(filePath)

    def sw = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(sw)
    xml.setDoubleQuotes(true)

    xml.resources() {
        values.each {
            k, v ->
                string(name: "${k}", "${v}")
        }
        integer(name: "${versionCodeName}" , "${versionCode}")
    }

    file.write(sw.toString())

}

def updateServiceIntentFilter(String file, String version) {

    def manifest = new File(file)

    if (!manifest.text.contains("virtuososdk.intent.action.START_VIRTUOSO_SERVICE_"+ version)){
        def manifestString = manifest.text.replaceAll("virtuososdk.intent.action.START_VIRTUOSO_SERVICE_[0-9a-zA-Z\\.]*", "virtuososdk.intent.action.START_VIRTUOSO_SERVICE_" + version)
    manifest.write(manifestString)
    }

}




task printBuildName {

    doLast {
        println("printing build name::")

        println(project.ext.getAppBuildName())
    }

}

task printVersion {

    doLast {

        def fullSemVersion = project.ext.getBuildAppVersion()
        println("printing build version::")

        println(fullSemVersion)
    }

}

task printAppVersionCode {

    doLast {

        def appCode = project.ext.getAppVersionCode()


        println("printing test app versionCode::")

        println(appCode)
    }
}

task printBitmovinSupportBuildName {
    doLast{
        println("printing build name::")

        println(project.ext.getBitmovinSupportBuildName())
    }
}

task printExoplayerImaSupportBuildName {
    doLast{
        println("printing build name::")

        println(project.ext.getExoplayerImaSupportBuildName())
    }
}